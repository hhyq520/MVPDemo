package com.zhitengda.gen;

import android.database.Cursor;
import android.database.sqlite.SQLiteStatement;

import org.greenrobot.greendao.AbstractDao;
import org.greenrobot.greendao.Property;
import org.greenrobot.greendao.internal.DaoConfig;
import org.greenrobot.greendao.database.Database;
import org.greenrobot.greendao.database.DatabaseStatement;

import com.ztd.mvpstandardpro_as.bean.LoginBean;

// THIS CODE IS GENERATED BY greenDAO, DO NOT EDIT.
/** 
 * DAO for table "LOGIN_BEAN".
*/
public class LoginBeanDao extends AbstractDao<LoginBean, Long> {

    public static final String TABLENAME = "LOGIN_BEAN";

    /**
     * Properties of entity LoginBean.<br/>
     * Can be used for QueryBuilder and for referencing column names.
     */
    public static class Properties {
        public final static Property _id = new Property(0, Long.class, "_id", true, "_id");
        public final static Property EmpCode = new Property(1, String.class, "empCode", false, "EMP_CODE");
        public final static Property EmpName = new Property(2, String.class, "empName", false, "EMP_NAME");
        public final static Property SiteName = new Property(3, String.class, "siteName", false, "SITE_NAME");
        public final static Property SiteCode = new Property(4, String.class, "siteCode", false, "SITE_CODE");
        public final static Property BarPassword = new Property(5, String.class, "barPassword", false, "BAR_PASSWORD");
        public final static Property DeptName = new Property(6, String.class, "deptName", false, "DEPT_NAME");
        public final static Property SystemDate = new Property(7, String.class, "systemDate", false, "SYSTEM_DATE");
        public final static Property SuperiorFinanceCenter = new Property(8, String.class, "superiorFinanceCenter", false, "SUPERIOR_FINANCE_CENTER");
    }


    public LoginBeanDao(DaoConfig config) {
        super(config);
    }
    
    public LoginBeanDao(DaoConfig config, DaoSession daoSession) {
        super(config, daoSession);
    }

    /** Creates the underlying database table. */
    public static void createTable(Database db, boolean ifNotExists) {
        String constraint = ifNotExists? "IF NOT EXISTS ": "";
        db.execSQL("CREATE TABLE " + constraint + "\"LOGIN_BEAN\" (" + //
                "\"_id\" INTEGER PRIMARY KEY AUTOINCREMENT ," + // 0: _id
                "\"EMP_CODE\" TEXT," + // 1: empCode
                "\"EMP_NAME\" TEXT," + // 2: empName
                "\"SITE_NAME\" TEXT," + // 3: siteName
                "\"SITE_CODE\" TEXT," + // 4: siteCode
                "\"BAR_PASSWORD\" TEXT," + // 5: barPassword
                "\"DEPT_NAME\" TEXT," + // 6: deptName
                "\"SYSTEM_DATE\" TEXT," + // 7: systemDate
                "\"SUPERIOR_FINANCE_CENTER\" TEXT);"); // 8: superiorFinanceCenter
    }

    /** Drops the underlying database table. */
    public static void dropTable(Database db, boolean ifExists) {
        String sql = "DROP TABLE " + (ifExists ? "IF EXISTS " : "") + "\"LOGIN_BEAN\"";
        db.execSQL(sql);
    }

    @Override
    protected final void bindValues(DatabaseStatement stmt, LoginBean entity) {
        stmt.clearBindings();
 
        Long _id = entity.get_id();
        if (_id != null) {
            stmt.bindLong(1, _id);
        }
 
        String empCode = entity.getEmpCode();
        if (empCode != null) {
            stmt.bindString(2, empCode);
        }
 
        String empName = entity.getEmpName();
        if (empName != null) {
            stmt.bindString(3, empName);
        }
 
        String siteName = entity.getSiteName();
        if (siteName != null) {
            stmt.bindString(4, siteName);
        }
 
        String siteCode = entity.getSiteCode();
        if (siteCode != null) {
            stmt.bindString(5, siteCode);
        }
 
        String barPassword = entity.getBarPassword();
        if (barPassword != null) {
            stmt.bindString(6, barPassword);
        }
 
        String deptName = entity.getDeptName();
        if (deptName != null) {
            stmt.bindString(7, deptName);
        }
 
        String systemDate = entity.getSystemDate();
        if (systemDate != null) {
            stmt.bindString(8, systemDate);
        }
 
        String superiorFinanceCenter = entity.getSuperiorFinanceCenter();
        if (superiorFinanceCenter != null) {
            stmt.bindString(9, superiorFinanceCenter);
        }
    }

    @Override
    protected final void bindValues(SQLiteStatement stmt, LoginBean entity) {
        stmt.clearBindings();
 
        Long _id = entity.get_id();
        if (_id != null) {
            stmt.bindLong(1, _id);
        }
 
        String empCode = entity.getEmpCode();
        if (empCode != null) {
            stmt.bindString(2, empCode);
        }
 
        String empName = entity.getEmpName();
        if (empName != null) {
            stmt.bindString(3, empName);
        }
 
        String siteName = entity.getSiteName();
        if (siteName != null) {
            stmt.bindString(4, siteName);
        }
 
        String siteCode = entity.getSiteCode();
        if (siteCode != null) {
            stmt.bindString(5, siteCode);
        }
 
        String barPassword = entity.getBarPassword();
        if (barPassword != null) {
            stmt.bindString(6, barPassword);
        }
 
        String deptName = entity.getDeptName();
        if (deptName != null) {
            stmt.bindString(7, deptName);
        }
 
        String systemDate = entity.getSystemDate();
        if (systemDate != null) {
            stmt.bindString(8, systemDate);
        }
 
        String superiorFinanceCenter = entity.getSuperiorFinanceCenter();
        if (superiorFinanceCenter != null) {
            stmt.bindString(9, superiorFinanceCenter);
        }
    }

    @Override
    public Long readKey(Cursor cursor, int offset) {
        return cursor.isNull(offset + 0) ? null : cursor.getLong(offset + 0);
    }    

    @Override
    public LoginBean readEntity(Cursor cursor, int offset) {
        LoginBean entity = new LoginBean( //
            cursor.isNull(offset + 0) ? null : cursor.getLong(offset + 0), // _id
            cursor.isNull(offset + 1) ? null : cursor.getString(offset + 1), // empCode
            cursor.isNull(offset + 2) ? null : cursor.getString(offset + 2), // empName
            cursor.isNull(offset + 3) ? null : cursor.getString(offset + 3), // siteName
            cursor.isNull(offset + 4) ? null : cursor.getString(offset + 4), // siteCode
            cursor.isNull(offset + 5) ? null : cursor.getString(offset + 5), // barPassword
            cursor.isNull(offset + 6) ? null : cursor.getString(offset + 6), // deptName
            cursor.isNull(offset + 7) ? null : cursor.getString(offset + 7), // systemDate
            cursor.isNull(offset + 8) ? null : cursor.getString(offset + 8) // superiorFinanceCenter
        );
        return entity;
    }
     
    @Override
    public void readEntity(Cursor cursor, LoginBean entity, int offset) {
        entity.set_id(cursor.isNull(offset + 0) ? null : cursor.getLong(offset + 0));
        entity.setEmpCode(cursor.isNull(offset + 1) ? null : cursor.getString(offset + 1));
        entity.setEmpName(cursor.isNull(offset + 2) ? null : cursor.getString(offset + 2));
        entity.setSiteName(cursor.isNull(offset + 3) ? null : cursor.getString(offset + 3));
        entity.setSiteCode(cursor.isNull(offset + 4) ? null : cursor.getString(offset + 4));
        entity.setBarPassword(cursor.isNull(offset + 5) ? null : cursor.getString(offset + 5));
        entity.setDeptName(cursor.isNull(offset + 6) ? null : cursor.getString(offset + 6));
        entity.setSystemDate(cursor.isNull(offset + 7) ? null : cursor.getString(offset + 7));
        entity.setSuperiorFinanceCenter(cursor.isNull(offset + 8) ? null : cursor.getString(offset + 8));
     }
    
    @Override
    protected final Long updateKeyAfterInsert(LoginBean entity, long rowId) {
        entity.set_id(rowId);
        return rowId;
    }
    
    @Override
    public Long getKey(LoginBean entity) {
        if(entity != null) {
            return entity.get_id();
        } else {
            return null;
        }
    }

    @Override
    public boolean hasKey(LoginBean entity) {
        return entity.get_id() != null;
    }

    @Override
    protected final boolean isEntityUpdateable() {
        return true;
    }
    
}
